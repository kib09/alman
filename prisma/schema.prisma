// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String
  phone     String?
  zipCode   String?
  address   String?
  detailAddress String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  cartItems CartItem[]
  wishlist  WishlistItem[]
  reviews   Review[]
  addresses Address[]

  @@map("users")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Int
  originalPrice Int?
  categoryId    String   @db.ObjectId
  images        String   // JSON string of image URLs
  sizes         String   // JSON string of available sizes
  colors        String   // JSON string of available colors
  details       String   // JSON string of product details
  isNew         Boolean  @default(false)
  isSale        Boolean  @default(false)
  inStock       Boolean  @default(true)
  rating        Float    @default(0)
  reviewCount   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category   Category        @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  wishlist   WishlistItem[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int    @default(1)
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, size, color])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  orderNumber     String   @unique
  status          String   @default("주문확인") // 주문확인, 배송중, 배송완료, 취소
  total           Int
  shippingAddress String
  shippingPhone   String
  shippingName    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  price     Int
  size      String?
  color     String?
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Address {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  name          String   // 배송지명 (예: 집, 회사)
  recipient     String   // 수령인
  phone         String   // 연락처
  address       String   // 기본 주소
  detailAddress String?  // 상세 주소
  zipCode       String   // 우편번호
  type          String   @default("home") // home, work, other
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}
